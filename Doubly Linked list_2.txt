class Node:
  def __init__(self, data):
    self.item = data
    self.nref = None
    self.pref = None

class DoublyLinkedList:
  def __init__(self):
    self.start_node = None

  def insert_in_emptylist(self, data):
    if self.start_node is None:
      new_node = Node(data)
      self.start_node = new_node
    else:
      print("list is not empty")


  def insert_at_start(self, data):
    if self.start_node is None:
      new_node = Node(data)
      self.start_node = new_node
      print("node inserted")
      return
    new_node = Node(data)
    new_node.nref = self.start_node
    self.start_node.pref = new_node
    self.start_node = new_node

  def traverse_list(self):
    if self.start_node is None:
      print("List has no element")
      return
    else:
      n = self.start_node
      while n is not None:
        print(n.item , " ")
        n = n.nref

  def delete_element_by_value(self, x):
    if self.start_node is None:
      print("The list has no element to delete")
      return
    if self.start_node.nref is None:
      if self.start_node.item == x:
        self.start_node = None
      else:
        print("Item not found")
      return

    if self.start_node.item == x:
      self.start_node = self.start_node.nref
      self.start_node.pref = None
      return

    n = self.start_node
    while n.nref is not None:
      if n.item == x:
        break;
      n = n.nref
    if n.nref is not None:
      n.pref.nref = n.nref
      n.nref.pref = n.pref
    else:
      if n.item == x:
        n.pref.nref = None
      else:
        print("Element not found")

h = DoublyLinkedList()
S=str(input("Enter the list elements seperated by spaces:"))
L=S.split(" ")
for i in range(0,len(L)):
  h.insert_at_start(int(L[i]))
h.traverse_list()
h.insert_at_start(50)
h.traverse_list()
h.delete_element_by_value(10)
h.traverse_list()
